name: Rust CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            can_fail: false
          - rust: beta
            can_fail: false
          - rust: nightly
            can_fail: true
    continue-on-error: ${{ matrix.can_fail }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Install Soroban CLI
      run: |
        cargo install --locked soroban-cli --features opt

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build workspace
      run: cargo build --verbose --all-targets

    - name: Build contracts for WebAssembly
      run: |
        for contract in contracts/*/; do
          if [ -d "$contract" ]; then
            echo "Building contract: $contract"
            cd "$contract"
            cargo build --target wasm32-unknown-unknown --release
            cd - > /dev/null
          fi
        done

    - name: Run tests
      run: cargo test --verbose --all

    - name: Run integration tests
      run: cargo test --test integration --verbose

    - name: Check documentation
      run: cargo doc --no-deps --all-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Install Soroban CLI
      run: cargo install --locked soroban-cli --features opt

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test, security-audit]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install Soroban CLI
      run: cargo install --locked soroban-cli --features opt

    - name: Build optimized contracts
      run: |
        for contract in contracts/*/; do
          if [ -d "$contract" ]; then
            echo "Building optimized contract: $contract"
            cd "$contract"
            cargo build --target wasm32-unknown-unknown --release
            
            # Optimize the wasm file
            wasm_file="target/wasm32-unknown-unknown/release/$(basename $contract).wasm"
            if [ -f "$wasm_file" ]; then
              soroban contract optimize --wasm "$wasm_file"
              echo "Contract $(basename $contract) built and optimized successfully"
            fi
            cd - > /dev/null
          fi
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: optimized-contracts
        path: |
          contracts/*/target/wasm32-unknown-unknown/release/*.wasm
        retention-days: 30