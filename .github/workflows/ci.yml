name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  SOROBAN_SDK_VERSION: "21.0.0"
  SOROBAN_CLI_VERSION: "21.5.0"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install soroban-cli (try binstall first)
      run: |
        echo "Attempting to install soroban-cli v$SOROBAN_CLI_VERSION via cargo-binstall..."
        if cargo binstall --no-confirm soroban-cli@$SOROBAN_CLI_VERSION; then
          echo "✅ Successfully installed soroban-cli via cargo-binstall"
        else
          echo "⚠️ cargo-binstall failed, falling back to cargo install..."
          cargo install --locked soroban-cli@$SOROBAN_CLI_VERSION
        fi

    - name: Verify soroban installation
      run: |
        soroban --version
        rustup target list --installed | grep wasm32-unknown-unknown

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Run tests
      run: cargo test --workspace --verbose

    - name: Build contracts (WASM)
      run: |
        echo "Building contracts for WASM target..."
        for contract in contracts/*/; do
          if [ -f "$contract/Cargo.toml" ]; then
            echo "Building $(basename "$contract")..."
            cd "$contract"
            soroban contract build
            cd - > /dev/null
          fi
        done

    - name: Verify WASM artifacts
      run: |
        echo "Verifying WASM build artifacts..."
        find . -name "*.wasm" -type f | while read wasm_file; do
          echo "✅ Found WASM artifact: $wasm_file"
          ls -lh "$wasm_file"
        done

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-audit-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-audit-

    - name: Install cargo-audit
      uses: cargo-bins/cargo-binstall@main
      with:
        tool: cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        components: llvm-tools-preview

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-coverage-

    - name: Install cargo-llvm-cov
      uses: cargo-bins/cargo-binstall@main
      with:
        tool: cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        verbose: true

  contract-size:
    name: Contract Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-size-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-size-

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install soroban-cli
      run: |
        if cargo binstall --no-confirm soroban-cli@$SOROBAN_CLI_VERSION; then
          echo "✅ Successfully installed soroban-cli via cargo-binstall"
        else
          echo "⚠️ cargo-binstall failed, falling back to cargo install..."
          cargo install --locked soroban-cli@$SOROBAN_CLI_VERSION
        fi

    - name: Build and analyze contract sizes
      run: |
        echo "📊 Contract Size Analysis"
        echo "========================="
        
        total_size=0
        contract_count=0
        
        for contract in contracts/*/; do
          if [ -f "$contract/Cargo.toml" ]; then
            contract_name=$(basename "$contract")
            echo "Building $contract_name..."
            
            cd "$contract"
            soroban contract build
            
            # Find the WASM file
            wasm_file=$(find target -name "*.wasm" -type f | head -1)
            
            if [ -f "$wasm_file" ]; then
              size=$(stat -f%z "$wasm_file" 2>/dev/null || stat -c%s "$wasm_file" 2>/dev/null || echo "0")
              size_kb=$((size / 1024))
              
              echo "📦 $contract_name: ${size_kb}KB (${size} bytes)"
              
              # Warn if contract is getting large (>100KB)
              if [ $size -gt 102400 ]; then
                echo "⚠️  WARNING: $contract_name is quite large (${size_kb}KB)"
              fi
              
              total_size=$((total_size + size))
              contract_count=$((contract_count + 1))
            else
              echo "❌ No WASM file found for $contract_name"
            fi
            
            cd - > /dev/null
          fi
        done
        
        if [ $contract_count -gt 0 ]; then
          total_kb=$((total_size / 1024))
          avg_kb=$((total_kb / contract_count))
          echo "========================="
          echo "📊 Summary:"
          echo "   Contracts: $contract_count"
          echo "   Total size: ${total_kb}KB"
          echo "   Average size: ${avg_kb}KB"
        fi